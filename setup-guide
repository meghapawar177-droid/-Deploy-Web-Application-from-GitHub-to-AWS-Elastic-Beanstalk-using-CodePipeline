Great 👏 Since you already created an **Elastic Beanstalk environment** and connected it to **CodePipeline with GitHub**, here’s a clean **Setup Guide (README-style)** you can use for your PHP project.

---

# 🚀 Setup Guide – Deploy PHP Web App from GitHub to AWS Elastic Beanstalk using CodePipeline

This guide walks you through setting up a **Continuous Deployment pipeline** where a **PHP web application** is automatically deployed from **GitHub → AWS Elastic Beanstalk** using **AWS CodePipeline**.

---

## 📌 Prerequisites

Before starting, make sure you have:

* An **AWS account** with Elastic Beanstalk and CodePipeline access.
* A **GitHub repository** with your PHP source code.
* An **Elastic Beanstalk environment** already created (PHP platform).
* A **CodePipeline** connected to your GitHub repository and Elastic Beanstalk.

---

## 📂 Project Structure (Recommended)

```
.
├── public/                # Public-facing files
│   ├── index.php          # Main entry point
│   ├── style.css
│   └── script.js
├── src/                   # PHP classes, controllers, models
│   ├── Controller.php
│   ├── Database.php
│   └── Helper.php
├── vendor/                # Composer dependencies (if used)
├── composer.json          # PHP dependencies
├── .ebextensions/         # (Optional) EB custom configurations
│   └── php-settings.config
└── README.md
```

---

## ⚙️ Setup Steps

### 1. Upload Code to GitHub

1. Commit and push your PHP project to your GitHub repository.
2. Ensure the main entry file is **index.php** inside the root or `public/` folder.
3. If using Composer, include `composer.json`. Elastic Beanstalk runs `composer install` automatically.

---

### 2. Configure Elastic Beanstalk

* Open the **Elastic Beanstalk console**.
* Verify your environment is running (e.g., `my-php-env`).
* (Optional) If you want your app served from `public/`, configure EB with `.ebextensions/php-settings.config` to set the document root.

Example (`.ebextensions/php-settings.config`):

```yaml
option_settings:
  aws:elasticbeanstalk:container:php:phpini:
    document_root: /public
```

---

### 3. Verify CodePipeline Setup

* Go to **AWS CodePipeline console**.
* Confirm that:

  * **Source stage** is connected to your GitHub repo.
  * **Deploy stage** is set to your Elastic Beanstalk environment.
* (Optional) Add a **Build stage** (AWS CodeBuild) if you want tests or preprocessing.

---

### 4. Deploy Your Application

* Push changes to GitHub.
* CodePipeline will automatically:

  1. Detect the change.
  2. Fetch code from GitHub.
  3. Deploy it to Elastic Beanstalk.
* Open your EB environment URL (`http://<env-name>.<region>.elasticbeanstalk.com`) to see your live app.

---

## ✅ Benefits of This Setup

* **Zero manual deployment** → CodePipeline handles everything.
* **Scalability** → Elastic Beanstalk auto-scales your app.
* **Version Control** → Every GitHub push is tracked and deployed.
* **Flexibility** → Supports PHP frameworks (Laravel, CodeIgniter, Symfony, etc.).

---

## 📖 References

* [AWS Elastic Beanstalk – PHP Platform](https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/php.html)
* [AWS CodePipeline Documentation](https://docs.aws.amazon.com/codepipeline/latest/userguide/welcome.html)

---

👉 Do you want me to also give you a **minimal sample PHP app (`index.php`)** so you can immediately test your pipeline deployment?
